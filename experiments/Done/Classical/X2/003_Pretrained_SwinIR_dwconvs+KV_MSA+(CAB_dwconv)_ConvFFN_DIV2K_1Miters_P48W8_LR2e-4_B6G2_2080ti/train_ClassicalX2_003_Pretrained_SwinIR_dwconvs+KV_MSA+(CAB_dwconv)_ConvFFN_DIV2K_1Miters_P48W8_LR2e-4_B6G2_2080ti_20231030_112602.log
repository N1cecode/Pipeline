2023-10-30 11:26:02,837 INFO: 
                ____                _       _____  ____
               / __ ) ____ _ _____ (_)_____/ ___/ / __ \
              / __  |/ __ `// ___// // ___/\__ \ / /_/ /
             / /_/ // /_/ /(__  )/ // /__ ___/ // _, _/
            /_____/ \__,_//____//_/ \___//____//_/ |_|
     ______                   __   __                 __      __
    / ____/____   ____   ____/ /  / /   __  __ _____ / /__   / /
   / / __ / __ \ / __ \ / __  /  / /   / / / // ___// //_/  / /
  / /_/ // /_/ // /_/ // /_/ /  / /___/ /_/ // /__ / /<    /_/
  \____/ \____/ \____/ \____/  /_____/\____/ \___//_/|_|  (_)
    
Version Information: 
	BasicSR: 1.4.2
	PyTorch: 2.0.1
	TorchVision: 0.15.2
2023-10-30 11:26:02,838 INFO: 
  name: ClassicalX2_003_Pretrained_SwinIR_dwconvs+KV_MSA+(CAB_dwconv)_ConvFFN_DIV2K_1Miters_P48W8_LR2e-4_B6G2_2080ti
  model_type: SwinIRModel
  scale: 2
  num_gpu: 2
  manual_seed: 3407
  datasets:[
    train:[
      name: DIV2K
      type: PairedImageDataset
      dataroot_gt: datasets/DIV2K/DIV2K_train_HR_sub
      dataroot_lq: datasets/DIV2K/DIV2K_train_LR_bicubic/X2_sub
      meta_info_file: basicsr/data/meta_info/meta_info_DIV2K800sub_GT.txt
      filename_tmpl: {}
      io_backend:[
        type: disk
      ]
      gt_size: 96
      use_hflip: True
      use_rot: True
      num_worker_per_gpu: 8
      batch_size_per_gpu: 6
      dataset_enlarge_ratio: 1
      prefetch_mode: None
      phase: train
      scale: 2
    ]
    val_1:[
      name: Set5
      type: PairedImageDataset
      dataroot_gt: datasets/Set5/GTmod12
      dataroot_lq: datasets/Set5/LRbicx2
      io_backend:[
        type: disk
      ]
      phase: val
      scale: 2
    ]
    val_2:[
      name: Set14
      type: PairedImageDataset
      dataroot_gt: datasets/Set14/GTmod12
      dataroot_lq: datasets/Set14/LRbicx2
      io_backend:[
        type: disk
      ]
      phase: val
      scale: 2
    ]
    val_3:[
      name: BSD100
      type: PairedImageDataset
      dataroot_gt: ./datasets/BSDS100/GTmod12
      dataroot_lq: ./datasets/BSDS100/LRbicx2
      io_backend:[
        type: disk
      ]
      phase: val
      scale: 2
    ]
    val_4:[
      name: Urban100
      type: PairedImageDataset
      dataroot_gt: ./datasets/urban100/GTmod12
      dataroot_lq: ./datasets/urban100/LRbicx2
      io_backend:[
        type: disk
      ]
      phase: val
      scale: 2
    ]
    val_5:[
      name: Manga109
      type: PairedImageDataset
      dataroot_gt: ./datasets/manga109/GTmod12
      dataroot_lq: ./datasets/manga109/LRbicx2
      io_backend:[
        type: disk
      ]
      phase: val
      scale: 2
    ]
  ]
  network_g:[
    type: SwinIR_Modified
    upscale: 2
    in_chans: 3
    img_size: 48
    window_size: 8
    img_range: 1.0
    depths: [6, 6, 6, 6, 6, 6]
    embed_dim: 180
    num_heads: [6, 6, 6, 6, 6, 6]
    mlp_ratio: 2
    upsampler: pixelshuffle
    resi_connection: 1conv
  ]
  path:[
    pretrain_network_g: /share3/home/renzihao/BasicSR/experiments/ClassicalX2_003_Pretrained_SwinIR_dwconvs+KV_MSA+(CAB_dwconv)_ConvFFN_DIV2K_1Miters_P48W8_LR2e-4_B6G2_2080ti/models/net_g_30000.pth
    strict_load_g: False
    resume_state: experiments/ClassicalX2_003_Pretrained_SwinIR_dwconvs+KV_MSA+(CAB_dwconv)_ConvFFN_DIV2K_1Miters_P48W8_LR2e-4_B6G2_2080ti/training_states/30000.state
    experiments_root: /share3/home/renzihao/BasicSR/experiments/ClassicalX2_003_Pretrained_SwinIR_dwconvs+KV_MSA+(CAB_dwconv)_ConvFFN_DIV2K_1Miters_P48W8_LR2e-4_B6G2_2080ti
    models: /share3/home/renzihao/BasicSR/experiments/ClassicalX2_003_Pretrained_SwinIR_dwconvs+KV_MSA+(CAB_dwconv)_ConvFFN_DIV2K_1Miters_P48W8_LR2e-4_B6G2_2080ti/models
    training_states: /share3/home/renzihao/BasicSR/experiments/ClassicalX2_003_Pretrained_SwinIR_dwconvs+KV_MSA+(CAB_dwconv)_ConvFFN_DIV2K_1Miters_P48W8_LR2e-4_B6G2_2080ti/training_states
    log: /share3/home/renzihao/BasicSR/experiments/ClassicalX2_003_Pretrained_SwinIR_dwconvs+KV_MSA+(CAB_dwconv)_ConvFFN_DIV2K_1Miters_P48W8_LR2e-4_B6G2_2080ti
    visualization: /share3/home/renzihao/BasicSR/experiments/ClassicalX2_003_Pretrained_SwinIR_dwconvs+KV_MSA+(CAB_dwconv)_ConvFFN_DIV2K_1Miters_P48W8_LR2e-4_B6G2_2080ti/visualization
  ]
  train:[
    ema_decay: 0.999
    optim_g:[
      type: Adam
      lr: 0.0002
      weight_decay: 0
      betas: [0.9, 0.99]
    ]
    scheduler:[
      type: MultiStepLR
      milestones: [50000, 200000, 250000, 275000]
      gamma: 0.5
    ]
    total_iter: 300000
    warmup_iter: -1
    pixel_opt:[
      type: L1Loss
      loss_weight: 1.0
      reduction: mean
    ]
  ]
  val:[
    val_freq: 5000.0
    save_img: False
    metrics:[
      psnr:[
        type: calculate_psnr
        crop_border: 2
        test_y_channel: True
      ]
      ssim:[
        type: calculate_ssim
        crop_border: 2
        test_y_channel: True
      ]
    ]
  ]
  logger:[
    print_freq: 100
    save_checkpoint_freq: 5000.0
    use_tb_logger: True
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  dist_params:[
    backend: nccl
    port: 29500
  ]
  dist: True
  rank: 0
  world_size: 2
  auto_resume: True
  is_train: True
  root_path: /share3/home/renzihao/BasicSR

2023-10-30 11:26:22,140 INFO: Dataset [PairedImageDataset] - DIV2K is built.
2023-10-30 11:26:22,142 INFO: Training statistics:
	Number of train images: 32592
	Dataset enlarge ratio: 1
	Batch size per gpu: 6
	World size (gpu number): 2
	Require iter number per epoch: 2716
	Total epochs: 111; iters: 300000.
2023-10-30 11:26:22,143 INFO: Dataset [PairedImageDataset] - Set5 is built.
2023-10-30 11:26:22,143 INFO: Number of val images/folders in Set5: 5
2023-10-30 11:26:22,145 INFO: Dataset [PairedImageDataset] - Set14 is built.
2023-10-30 11:26:22,145 INFO: Number of val images/folders in Set14: 14
2023-10-30 11:26:22,154 INFO: Dataset [PairedImageDataset] - BSD100 is built.
2023-10-30 11:26:22,154 INFO: Number of val images/folders in BSD100: 100
2023-10-30 11:26:22,162 INFO: Dataset [PairedImageDataset] - Urban100 is built.
2023-10-30 11:26:22,163 INFO: Number of val images/folders in Urban100: 100
2023-10-30 11:26:22,173 INFO: Dataset [PairedImageDataset] - Manga109 is built.
2023-10-30 11:26:22,173 INFO: Number of val images/folders in Manga109: 109
2023-10-30 11:26:22,789 INFO: Network [SwinIR_Modified] is created.
2023-10-30 11:26:28,595 INFO: Network: DistributedDataParallel - SwinIR_Modified, with parameters: 12,267,593
2023-10-30 11:26:28,595 INFO: SwinIR_Modified(
  (conv_first): Conv2d(3, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (edge_ex): EdgeExtraction(
    (hpf): Sobel(
      (conv_sobel_x): Conv2d(3, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=3, bias=False)
      (conv_sobel_y): Conv2d(3, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=3, bias=False)
    )
    (conv): Conv2d(3, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (patch_embed): PatchEmbed(
    (norm): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
  )
  (patch_unembed): PatchUnEmbed()
  (pos_drop): Dropout(p=0.0, inplace=False)
  (layers): ModuleList(
    (0): RSTB(
      (residual_group): BasicLayer(
        dim=180, input_resolution=(48, 48), depth=6
        (blocks): ModuleList(
          (0): SwinTransformerBlock(
            dim=180, input_resolution=(48, 48), num_heads=6, window_size=8, shift_size=0, mlp_ratio=2
            (norm1): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (attn): WindowAttention(
              dim=180, window_size=(8, 8), num_heads=6
              (q): Linear(in_features=180, out_features=180, bias=True)
              (kv): Linear(in_features=180, out_features=360, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=False)
              (proj): Linear(in_features=180, out_features=180, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=False)
              (softmax): Softmax(dim=-1)
            )
            (conv_scale): LearnableScale()
            (conv_block): CAB(
              (cab): Sequential(
                (0): Conv2d(180, 60, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (1): GELU(approximate='none')
                (2): Conv2d(60, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (3): ChannelAttention(
                  (attention): Sequential(
                    (0): AdaptiveAvgPool2d(output_size=1)
                    (1): Conv2d(180, 6, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (2): ReLU(inplace=True)
                    (3): Conv2d(6, 180, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (4): Sigmoid()
                  )
                )
              )
            )
            (drop_path): Identity()
            (norm2): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=180, out_features=360, bias=True)
              (act): GELU(approximate='none')
              (dwconv): dwconv(
                (depthwise_conv): Sequential(
                  (0): Conv2d(360, 360, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=360)
                  (1): GELU(approximate='none')
                )
              )
              (fc2): Linear(in_features=360, out_features=180, bias=True)
              (drop): Dropout(p=0.0, inplace=False)
            )
          )
          (1): SwinTransformerBlock(
            dim=180, input_resolution=(48, 48), num_heads=6, window_size=8, shift_size=4, mlp_ratio=2
            (norm1): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (attn): WindowAttention(
              dim=180, window_size=(8, 8), num_heads=6
              (q): Linear(in_features=180, out_features=180, bias=True)
              (kv): Linear(in_features=180, out_features=360, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=False)
              (proj): Linear(in_features=180, out_features=180, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=False)
              (softmax): Softmax(dim=-1)
            )
            (conv_scale): LearnableScale()
            (conv_block): CAB(
              (cab): Sequential(
                (0): Conv2d(180, 60, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (1): GELU(approximate='none')
                (2): Conv2d(60, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (3): ChannelAttention(
                  (attention): Sequential(
                    (0): AdaptiveAvgPool2d(output_size=1)
                    (1): Conv2d(180, 6, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (2): ReLU(inplace=True)
                    (3): Conv2d(6, 180, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (4): Sigmoid()
                  )
                )
              )
            )
            (drop_path): DropPath()
            (norm2): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=180, out_features=360, bias=True)
              (act): GELU(approximate='none')
              (dwconv): dwconv(
                (depthwise_conv): Sequential(
                  (0): Conv2d(360, 360, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=360)
                  (1): GELU(approximate='none')
                )
              )
              (fc2): Linear(in_features=360, out_features=180, bias=True)
              (drop): Dropout(p=0.0, inplace=False)
            )
          )
          (2): SwinTransformerBlock(
            dim=180, input_resolution=(48, 48), num_heads=6, window_size=8, shift_size=0, mlp_ratio=2
            (norm1): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (attn): WindowAttention(
              dim=180, window_size=(8, 8), num_heads=6
              (q): Linear(in_features=180, out_features=180, bias=True)
              (kv): Linear(in_features=180, out_features=360, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=False)
              (proj): Linear(in_features=180, out_features=180, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=False)
              (softmax): Softmax(dim=-1)
            )
            (conv_scale): LearnableScale()
            (conv_block): CAB(
              (cab): Sequential(
                (0): Conv2d(180, 60, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (1): GELU(approximate='none')
                (2): Conv2d(60, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (3): ChannelAttention(
                  (attention): Sequential(
                    (0): AdaptiveAvgPool2d(output_size=1)
                    (1): Conv2d(180, 6, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (2): ReLU(inplace=True)
                    (3): Conv2d(6, 180, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (4): Sigmoid()
                  )
                )
              )
            )
            (drop_path): DropPath()
            (norm2): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=180, out_features=360, bias=True)
              (act): GELU(approximate='none')
              (dwconv): dwconv(
                (depthwise_conv): Sequential(
                  (0): Conv2d(360, 360, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=360)
                  (1): GELU(approximate='none')
                )
              )
              (fc2): Linear(in_features=360, out_features=180, bias=True)
              (drop): Dropout(p=0.0, inplace=False)
            )
          )
          (3): SwinTransformerBlock(
            dim=180, input_resolution=(48, 48), num_heads=6, window_size=8, shift_size=4, mlp_ratio=2
            (norm1): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (attn): WindowAttention(
              dim=180, window_size=(8, 8), num_heads=6
              (q): Linear(in_features=180, out_features=180, bias=True)
              (kv): Linear(in_features=180, out_features=360, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=False)
              (proj): Linear(in_features=180, out_features=180, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=False)
              (softmax): Softmax(dim=-1)
            )
            (conv_scale): LearnableScale()
            (conv_block): CAB(
              (cab): Sequential(
                (0): Conv2d(180, 60, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (1): GELU(approximate='none')
                (2): Conv2d(60, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (3): ChannelAttention(
                  (attention): Sequential(
                    (0): AdaptiveAvgPool2d(output_size=1)
                    (1): Conv2d(180, 6, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (2): ReLU(inplace=True)
                    (3): Conv2d(6, 180, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (4): Sigmoid()
                  )
                )
              )
            )
            (drop_path): DropPath()
            (norm2): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=180, out_features=360, bias=True)
              (act): GELU(approximate='none')
              (dwconv): dwconv(
                (depthwise_conv): Sequential(
                  (0): Conv2d(360, 360, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=360)
                  (1): GELU(approximate='none')
                )
              )
              (fc2): Linear(in_features=360, out_features=180, bias=True)
              (drop): Dropout(p=0.0, inplace=False)
            )
          )
          (4): SwinTransformerBlock(
            dim=180, input_resolution=(48, 48), num_heads=6, window_size=8, shift_size=0, mlp_ratio=2
            (norm1): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (attn): WindowAttention(
              dim=180, window_size=(8, 8), num_heads=6
              (q): Linear(in_features=180, out_features=180, bias=True)
              (kv): Linear(in_features=180, out_features=360, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=False)
              (proj): Linear(in_features=180, out_features=180, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=False)
              (softmax): Softmax(dim=-1)
            )
            (conv_scale): LearnableScale()
            (conv_block): CAB(
              (cab): Sequential(
                (0): Conv2d(180, 60, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (1): GELU(approximate='none')
                (2): Conv2d(60, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (3): ChannelAttention(
                  (attention): Sequential(
                    (0): AdaptiveAvgPool2d(output_size=1)
                    (1): Conv2d(180, 6, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (2): ReLU(inplace=True)
                    (3): Conv2d(6, 180, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (4): Sigmoid()
                  )
                )
              )
            )
            (drop_path): DropPath()
            (norm2): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=180, out_features=360, bias=True)
              (act): GELU(approximate='none')
              (dwconv): dwconv(
                (depthwise_conv): Sequential(
                  (0): Conv2d(360, 360, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=360)
                  (1): GELU(approximate='none')
                )
              )
              (fc2): Linear(in_features=360, out_features=180, bias=True)
              (drop): Dropout(p=0.0, inplace=False)
            )
          )
          (5): SwinTransformerBlock(
            dim=180, input_resolution=(48, 48), num_heads=6, window_size=8, shift_size=4, mlp_ratio=2
            (norm1): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (attn): WindowAttention(
              dim=180, window_size=(8, 8), num_heads=6
              (q): Linear(in_features=180, out_features=180, bias=True)
              (kv): Linear(in_features=180, out_features=360, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=False)
              (proj): Linear(in_features=180, out_features=180, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=False)
              (softmax): Softmax(dim=-1)
            )
            (conv_scale): LearnableScale()
            (conv_block): CAB(
              (cab): Sequential(
                (0): Conv2d(180, 60, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (1): GELU(approximate='none')
                (2): Conv2d(60, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (3): ChannelAttention(
                  (attention): Sequential(
                    (0): AdaptiveAvgPool2d(output_size=1)
                    (1): Conv2d(180, 6, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (2): ReLU(inplace=True)
                    (3): Conv2d(6, 180, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (4): Sigmoid()
                  )
                )
              )
            )
            (drop_path): DropPath()
            (norm2): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=180, out_features=360, bias=True)
              (act): GELU(approximate='none')
              (dwconv): dwconv(
                (depthwise_conv): Sequential(
                  (0): Conv2d(360, 360, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=360)
                  (1): GELU(approximate='none')
                )
              )
              (fc2): Linear(in_features=360, out_features=180, bias=True)
              (drop): Dropout(p=0.0, inplace=False)
            )
          )
        )
      )
      (conv): Conv2d(180, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (patch_embed): PatchEmbed()
      (patch_unembed): PatchUnEmbed()
    )
    (1-5): 5 x RSTB(
      (residual_group): BasicLayer(
        dim=180, input_resolution=(48, 48), depth=6
        (blocks): ModuleList(
          (0): SwinTransformerBlock(
            dim=180, input_resolution=(48, 48), num_heads=6, window_size=8, shift_size=0, mlp_ratio=2
            (norm1): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (attn): WindowAttention(
              dim=180, window_size=(8, 8), num_heads=6
              (q): Linear(in_features=180, out_features=180, bias=True)
              (kv): Linear(in_features=180, out_features=360, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=False)
              (proj): Linear(in_features=180, out_features=180, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=False)
              (softmax): Softmax(dim=-1)
            )
            (conv_scale): LearnableScale()
            (conv_block): CAB(
              (cab): Sequential(
                (0): Conv2d(180, 60, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (1): GELU(approximate='none')
                (2): Conv2d(60, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (3): ChannelAttention(
                  (attention): Sequential(
                    (0): AdaptiveAvgPool2d(output_size=1)
                    (1): Conv2d(180, 6, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (2): ReLU(inplace=True)
                    (3): Conv2d(6, 180, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (4): Sigmoid()
                  )
                )
              )
            )
            (drop_path): DropPath()
            (norm2): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=180, out_features=360, bias=True)
              (act): GELU(approximate='none')
              (dwconv): dwconv(
                (depthwise_conv): Sequential(
                  (0): Conv2d(360, 360, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=360)
                  (1): GELU(approximate='none')
                )
              )
              (fc2): Linear(in_features=360, out_features=180, bias=True)
              (drop): Dropout(p=0.0, inplace=False)
            )
          )
          (1): SwinTransformerBlock(
            dim=180, input_resolution=(48, 48), num_heads=6, window_size=8, shift_size=4, mlp_ratio=2
            (norm1): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (attn): WindowAttention(
              dim=180, window_size=(8, 8), num_heads=6
              (q): Linear(in_features=180, out_features=180, bias=True)
              (kv): Linear(in_features=180, out_features=360, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=False)
              (proj): Linear(in_features=180, out_features=180, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=False)
              (softmax): Softmax(dim=-1)
            )
            (conv_scale): LearnableScale()
            (conv_block): CAB(
              (cab): Sequential(
                (0): Conv2d(180, 60, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (1): GELU(approximate='none')
                (2): Conv2d(60, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (3): ChannelAttention(
                  (attention): Sequential(
                    (0): AdaptiveAvgPool2d(output_size=1)
                    (1): Conv2d(180, 6, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (2): ReLU(inplace=True)
                    (3): Conv2d(6, 180, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (4): Sigmoid()
                  )
                )
              )
            )
            (drop_path): DropPath()
            (norm2): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=180, out_features=360, bias=True)
              (act): GELU(approximate='none')
              (dwconv): dwconv(
                (depthwise_conv): Sequential(
                  (0): Conv2d(360, 360, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=360)
                  (1): GELU(approximate='none')
                )
              )
              (fc2): Linear(in_features=360, out_features=180, bias=True)
              (drop): Dropout(p=0.0, inplace=False)
            )
          )
          (2): SwinTransformerBlock(
            dim=180, input_resolution=(48, 48), num_heads=6, window_size=8, shift_size=0, mlp_ratio=2
            (norm1): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (attn): WindowAttention(
              dim=180, window_size=(8, 8), num_heads=6
              (q): Linear(in_features=180, out_features=180, bias=True)
              (kv): Linear(in_features=180, out_features=360, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=False)
              (proj): Linear(in_features=180, out_features=180, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=False)
              (softmax): Softmax(dim=-1)
            )
            (conv_scale): LearnableScale()
            (conv_block): CAB(
              (cab): Sequential(
                (0): Conv2d(180, 60, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (1): GELU(approximate='none')
                (2): Conv2d(60, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (3): ChannelAttention(
                  (attention): Sequential(
                    (0): AdaptiveAvgPool2d(output_size=1)
                    (1): Conv2d(180, 6, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (2): ReLU(inplace=True)
                    (3): Conv2d(6, 180, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (4): Sigmoid()
                  )
                )
              )
            )
            (drop_path): DropPath()
            (norm2): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=180, out_features=360, bias=True)
              (act): GELU(approximate='none')
              (dwconv): dwconv(
                (depthwise_conv): Sequential(
                  (0): Conv2d(360, 360, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=360)
                  (1): GELU(approximate='none')
                )
              )
              (fc2): Linear(in_features=360, out_features=180, bias=True)
              (drop): Dropout(p=0.0, inplace=False)
            )
          )
          (3): SwinTransformerBlock(
            dim=180, input_resolution=(48, 48), num_heads=6, window_size=8, shift_size=4, mlp_ratio=2
            (norm1): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (attn): WindowAttention(
              dim=180, window_size=(8, 8), num_heads=6
              (q): Linear(in_features=180, out_features=180, bias=True)
              (kv): Linear(in_features=180, out_features=360, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=False)
              (proj): Linear(in_features=180, out_features=180, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=False)
              (softmax): Softmax(dim=-1)
            )
            (conv_scale): LearnableScale()
            (conv_block): CAB(
              (cab): Sequential(
                (0): Conv2d(180, 60, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (1): GELU(approximate='none')
                (2): Conv2d(60, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (3): ChannelAttention(
                  (attention): Sequential(
                    (0): AdaptiveAvgPool2d(output_size=1)
                    (1): Conv2d(180, 6, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (2): ReLU(inplace=True)
                    (3): Conv2d(6, 180, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (4): Sigmoid()
                  )
                )
              )
            )
            (drop_path): DropPath()
            (norm2): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=180, out_features=360, bias=True)
              (act): GELU(approximate='none')
              (dwconv): dwconv(
                (depthwise_conv): Sequential(
                  (0): Conv2d(360, 360, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=360)
                  (1): GELU(approximate='none')
                )
              )
              (fc2): Linear(in_features=360, out_features=180, bias=True)
              (drop): Dropout(p=0.0, inplace=False)
            )
          )
          (4): SwinTransformerBlock(
            dim=180, input_resolution=(48, 48), num_heads=6, window_size=8, shift_size=0, mlp_ratio=2
            (norm1): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (attn): WindowAttention(
              dim=180, window_size=(8, 8), num_heads=6
              (q): Linear(in_features=180, out_features=180, bias=True)
              (kv): Linear(in_features=180, out_features=360, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=False)
              (proj): Linear(in_features=180, out_features=180, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=False)
              (softmax): Softmax(dim=-1)
            )
            (conv_scale): LearnableScale()
            (conv_block): CAB(
              (cab): Sequential(
                (0): Conv2d(180, 60, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (1): GELU(approximate='none')
                (2): Conv2d(60, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (3): ChannelAttention(
                  (attention): Sequential(
                    (0): AdaptiveAvgPool2d(output_size=1)
                    (1): Conv2d(180, 6, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (2): ReLU(inplace=True)
                    (3): Conv2d(6, 180, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (4): Sigmoid()
                  )
                )
              )
            )
            (drop_path): DropPath()
            (norm2): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=180, out_features=360, bias=True)
              (act): GELU(approximate='none')
              (dwconv): dwconv(
                (depthwise_conv): Sequential(
                  (0): Conv2d(360, 360, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=360)
                  (1): GELU(approximate='none')
                )
              )
              (fc2): Linear(in_features=360, out_features=180, bias=True)
              (drop): Dropout(p=0.0, inplace=False)
            )
          )
          (5): SwinTransformerBlock(
            dim=180, input_resolution=(48, 48), num_heads=6, window_size=8, shift_size=4, mlp_ratio=2
            (norm1): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (attn): WindowAttention(
              dim=180, window_size=(8, 8), num_heads=6
              (q): Linear(in_features=180, out_features=180, bias=True)
              (kv): Linear(in_features=180, out_features=360, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=False)
              (proj): Linear(in_features=180, out_features=180, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=False)
              (softmax): Softmax(dim=-1)
            )
            (conv_scale): LearnableScale()
            (conv_block): CAB(
              (cab): Sequential(
                (0): Conv2d(180, 60, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (1): GELU(approximate='none')
                (2): Conv2d(60, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (3): ChannelAttention(
                  (attention): Sequential(
                    (0): AdaptiveAvgPool2d(output_size=1)
                    (1): Conv2d(180, 6, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (2): ReLU(inplace=True)
                    (3): Conv2d(6, 180, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (4): Sigmoid()
                  )
                )
              )
            )
            (drop_path): DropPath()
            (norm2): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=180, out_features=360, bias=True)
              (act): GELU(approximate='none')
              (dwconv): dwconv(
                (depthwise_conv): Sequential(
                  (0): Conv2d(360, 360, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=360)
                  (1): GELU(approximate='none')
                )
              )
              (fc2): Linear(in_features=360, out_features=180, bias=True)
              (drop): Dropout(p=0.0, inplace=False)
            )
          )
        )
      )
      (conv): Conv2d(180, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (patch_embed): PatchEmbed()
      (patch_unembed): PatchUnEmbed()
    )
  )
  (edge_convs): ModuleList(
    (0-5): 6 x EdgeConv(
      (dwconv): Conv2d(180, 180, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=180)
      (gelu): GELU(approximate='none')
    )
  )
  (norm): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
  (conv_after_body): Conv2d(180, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_before_upsample): Sequential(
    (0): Conv2d(180, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): LeakyReLU(negative_slope=0.01, inplace=True)
  )
  (upsample): Upsample(
    (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): PixelShuffle(upscale_factor=2)
  )
  (conv_last): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
)
2023-10-30 11:26:39,753 INFO: Loading SwinIR_Modified model from /share3/home/renzihao/BasicSR/experiments/ClassicalX2_003_Pretrained_SwinIR_dwconvs+KV_MSA+(CAB_dwconv)_ConvFFN_DIV2K_1Miters_P48W8_LR2e-4_B6G2_2080ti/models/net_g_30000.pth, with param key: [params].
2023-10-30 11:26:40,130 INFO: Use Exponential Moving Average with decay: 0.999
2023-10-30 11:26:40,785 INFO: Network [SwinIR_Modified] is created.
2023-10-30 11:26:42,048 INFO: Loading SwinIR_Modified model from /share3/home/renzihao/BasicSR/experiments/ClassicalX2_003_Pretrained_SwinIR_dwconvs+KV_MSA+(CAB_dwconv)_ConvFFN_DIV2K_1Miters_P48W8_LR2e-4_B6G2_2080ti/models/net_g_30000.pth, with param key: [params_ema].
2023-10-30 11:26:42,483 INFO: Loss [L1Loss] is created.
2023-10-30 11:26:42,483 WARNING: Params module.edge_ex.hpf.conv_sobel_x.weight will not be optimized.
2023-10-30 11:26:42,483 WARNING: Params module.edge_ex.hpf.conv_sobel_y.weight will not be optimized.
2023-10-30 11:26:42,500 INFO: Model [SwinIRModel] is created.
2023-10-30 11:26:42,929 INFO: Resuming training from epoch: 10, iter: 30000.
2023-10-30 11:27:24,083 INFO: Start training from epoch: 10, iter: 30000
2023-10-30 11:29:31,880 INFO: [Class..][epoch: 10, iter:  30,100, lr:(2.000e-04,)] [eta: 5 days, 5:24:38, time (data): 1.278 (0.432)] l_pix: 1.2409e-02 
2023-10-30 11:30:44,571 INFO: [Class..][epoch: 10, iter:  30,200, lr:(2.000e-04,)] [eta: 3 days, 18:05:51, time (data): 1.002 (0.217)] l_pix: 1.2465e-02 
2023-10-30 11:31:56,952 INFO: [Class..][epoch: 10, iter:  30,300, lr:(2.000e-04,)] [eta: 3 days, 6:09:26, time (data): 0.723 (0.003)] l_pix: 8.6560e-03 
2023-10-30 11:33:10,650 INFO: [Class..][epoch: 10, iter:  30,400, lr:(2.000e-04,)] [eta: 3 days, 0:24:30, time (data): 0.730 (0.003)] l_pix: 2.1726e-02 
2023-10-30 11:34:23,486 INFO: [Class..][epoch: 10, iter:  30,500, lr:(2.000e-04,)] [eta: 2 days, 20:49:02, time (data): 0.729 (0.003)] l_pix: 1.7313e-02 
2023-10-30 11:35:36,732 INFO: [Class..][epoch: 10, iter:  30,600, lr:(2.000e-04,)] [eta: 2 days, 18:27:57, time (data): 0.731 (0.003)] l_pix: 1.2877e-02 
2023-10-30 11:36:50,440 INFO: [Class..][epoch: 10, iter:  30,700, lr:(2.000e-04,)] [eta: 2 days, 16:49:43, time (data): 0.737 (0.003)] l_pix: 1.6899e-02 
2023-10-30 11:37:56,554 INFO: [Class..][epoch: 10, iter:  30,800, lr:(2.000e-04,)] [eta: 2 days, 14:53:10, time (data): 0.698 (0.003)] l_pix: 9.7638e-03 
2023-10-30 11:39:09,735 INFO: [Class..][epoch: 10, iter:  30,900, lr:(2.000e-04,)] [eta: 2 days, 13:57:26, time (data): 0.732 (0.003)] l_pix: 1.2521e-02 
2023-10-30 11:40:24,222 INFO: [Class..][epoch: 10, iter:  31,000, lr:(2.000e-04,)] [eta: 2 days, 13:18:25, time (data): 0.739 (0.003)] l_pix: 1.2175e-02 
2023-10-30 11:41:38,384 INFO: [Class..][epoch: 10, iter:  31,100, lr:(2.000e-04,)] [eta: 2 days, 12:44:58, time (data): 0.743 (0.003)] l_pix: 1.2682e-02 
2023-10-30 11:42:50,019 INFO: [Class..][epoch: 10, iter:  31,200, lr:(2.000e-04,)] [eta: 2 days, 12:07:26, time (data): 0.729 (0.003)] l_pix: 1.8278e-02 
2023-10-30 11:44:06,020 INFO: [Class..][epoch: 10, iter:  31,300, lr:(2.000e-04,)] [eta: 2 days, 11:50:32, time (data): 0.763 (0.003)] l_pix: 1.1237e-02 
2023-10-30 11:45:21,637 INFO: [Class..][epoch: 10, iter:  31,400, lr:(2.000e-04,)] [eta: 2 days, 11:34:37, time (data): 0.760 (0.003)] l_pix: 1.1589e-02 
2023-10-30 11:46:36,027 INFO: [Class..][epoch: 10, iter:  31,500, lr:(2.000e-04,)] [eta: 2 days, 11:17:01, time (data): 0.734 (0.003)] l_pix: 1.2179e-02 
2023-10-30 11:47:49,286 INFO: [Class..][epoch: 10, iter:  31,600, lr:(2.000e-04,)] [eta: 2 days, 10:58:17, time (data): 0.733 (0.003)] l_pix: 1.5401e-02 
2023-10-30 11:49:01,669 INFO: [Class..][epoch: 10, iter:  31,700, lr:(2.000e-04,)] [eta: 2 days, 10:39:19, time (data): 0.724 (0.003)] l_pix: 1.0661e-02 
2023-10-30 11:50:14,710 INFO: [Class..][epoch: 10, iter:  31,800, lr:(2.000e-04,)] [eta: 2 days, 10:23:57, time (data): 0.727 (0.003)] l_pix: 1.0109e-02 
2023-10-30 11:51:26,309 INFO: [Class..][epoch: 10, iter:  31,900, lr:(2.000e-04,)] [eta: 2 days, 10:06:41, time (data): 0.716 (0.003)] l_pix: 1.5912e-02 
2023-10-30 11:52:43,003 INFO: [Class..][epoch: 10, iter:  32,000, lr:(2.000e-04,)] [eta: 2 days, 10:02:24, time (data): 0.743 (0.003)] l_pix: 1.4426e-02 
2023-10-30 11:53:58,633 INFO: [Class..][epoch: 10, iter:  32,100, lr:(2.000e-04,)] [eta: 2 days, 9:56:08, time (data): 0.748 (0.004)] l_pix: 9.0471e-03 
2023-10-30 11:55:12,023 INFO: [Class..][epoch: 10, iter:  32,200, lr:(2.000e-04,)] [eta: 2 days, 9:45:47, time (data): 0.741 (0.003)] l_pix: 1.8051e-02 
2023-10-30 11:56:24,866 INFO: [Class..][epoch: 10, iter:  32,300, lr:(2.000e-04,)] [eta: 2 days, 9:35:10, time (data): 0.731 (0.003)] l_pix: 1.2646e-02 
2023-10-30 11:57:39,714 INFO: [Class..][epoch: 10, iter:  32,400, lr:(2.000e-04,)] [eta: 2 days, 9:29:04, time (data): 0.740 (0.003)] l_pix: 1.2309e-02 
2023-10-30 11:58:53,261 INFO: [Class..][epoch: 10, iter:  32,500, lr:(2.000e-04,)] [eta: 2 days, 9:21:02, time (data): 0.735 (0.003)] l_pix: 8.1612e-03 
2023-10-30 12:00:05,261 INFO: [Class..][epoch: 10, iter:  32,600, lr:(2.000e-04,)] [eta: 2 days, 9:10:52, time (data): 0.727 (0.003)] l_pix: 1.8667e-02 
2023-10-30 12:01:18,551 INFO: [Class..][epoch: 10, iter:  32,700, lr:(2.000e-04,)] [eta: 2 days, 9:03:29, time (data): 0.732 (0.003)] l_pix: 1.6649e-02 
2023-10-30 12:04:12,917 INFO: [Class..][epoch: 11, iter:  32,800, lr:(2.000e-04,)] [eta: 2 days, 11:37:15, time (data): 1.273 (0.505)] l_pix: 1.4123e-02 
2023-10-30 12:05:32,552 INFO: [Class..][epoch: 11, iter:  32,900, lr:(2.000e-04,)] [eta: 2 days, 11:34:51, time (data): 0.793 (0.004)] l_pix: 9.6306e-03 
2023-10-30 12:06:47,189 INFO: [Class..][epoch: 11, iter:  33,000, lr:(2.000e-04,)] [eta: 2 days, 11:25:06, time (data): 0.768 (0.004)] l_pix: 9.6118e-03 
2023-10-30 12:08:03,921 INFO: [Class..][epoch: 11, iter:  33,100, lr:(2.000e-04,)] [eta: 2 days, 11:18:55, time (data): 0.754 (0.004)] l_pix: 8.4703e-03 
2023-10-30 12:09:38,175 INFO: [Class..][epoch: 11, iter:  33,200, lr:(2.000e-04,)] [eta: 2 days, 11:37:23, time (data): 0.856 (0.098)] l_pix: 1.2820e-02 
2023-10-30 12:10:56,725 INFO: [Class..][epoch: 11, iter:  33,300, lr:(2.000e-04,)] [eta: 2 days, 11:33:29, time (data): 0.775 (0.004)] l_pix: 1.5409e-02 
2023-10-30 12:12:15,450 INFO: [Class..][epoch: 11, iter:  33,400, lr:(2.000e-04,)] [eta: 2 days, 11:29:57, time (data): 0.782 (0.004)] l_pix: 1.3013e-02 
2023-10-30 12:13:30,695 INFO: [Class..][epoch: 11, iter:  33,500, lr:(2.000e-04,)] [eta: 2 days, 11:22:09, time (data): 0.756 (0.004)] l_pix: 1.5623e-02 
2023-10-30 12:14:46,811 INFO: [Class..][epoch: 11, iter:  33,600, lr:(2.000e-04,)] [eta: 2 days, 11:15:47, time (data): 0.759 (0.004)] l_pix: 1.2893e-02 
2023-10-30 12:16:01,011 INFO: [Class..][epoch: 11, iter:  33,700, lr:(2.000e-04,)] [eta: 2 days, 11:07:23, time (data): 0.747 (0.004)] l_pix: 1.4558e-02 
2023-10-30 12:17:16,738 INFO: [Class..][epoch: 11, iter:  33,800, lr:(2.000e-04,)] [eta: 2 days, 11:01:09, time (data): 0.753 (0.004)] l_pix: 9.0137e-03 
2023-10-30 12:18:33,731 INFO: [Class..][epoch: 11, iter:  33,900, lr:(2.000e-04,)] [eta: 2 days, 10:56:37, time (data): 0.793 (0.004)] l_pix: 1.5145e-02 
2023-10-30 12:19:52,299 INFO: [Class..][epoch: 11, iter:  34,000, lr:(2.000e-04,)] [eta: 2 days, 10:53:59, time (data): 0.789 (0.004)] l_pix: 1.7567e-02 
2023-10-30 12:21:03,922 INFO: [Class..][epoch: 11, iter:  34,100, lr:(2.000e-04,)] [eta: 2 days, 10:43:54, time (data): 0.694 (0.003)] l_pix: 1.0976e-02 
2023-10-30 12:22:16,333 INFO: [Class..][epoch: 11, iter:  34,200, lr:(2.000e-04,)] [eta: 2 days, 10:35:05, time (data): 0.711 (0.003)] l_pix: 1.1850e-02 
2023-10-30 12:23:31,783 INFO: [Class..][epoch: 11, iter:  34,300, lr:(2.000e-04,)] [eta: 2 days, 10:29:45, time (data): 0.771 (0.004)] l_pix: 1.3910e-02 
2023-10-30 12:24:48,322 INFO: [Class..][epoch: 11, iter:  34,400, lr:(2.000e-04,)] [eta: 2 days, 10:25:42, time (data): 0.768 (0.004)] l_pix: 1.3740e-02 
2023-10-30 12:26:03,864 INFO: [Class..][epoch: 11, iter:  34,500, lr:(2.000e-04,)] [eta: 2 days, 10:20:47, time (data): 0.759 (0.003)] l_pix: 1.5064e-02 
2023-10-30 12:27:20,541 INFO: [Class..][epoch: 11, iter:  34,600, lr:(2.000e-04,)] [eta: 2 days, 10:17:07, time (data): 0.763 (0.003)] l_pix: 1.6182e-02 
2023-10-30 12:28:35,832 INFO: [Class..][epoch: 11, iter:  34,700, lr:(2.000e-04,)] [eta: 2 days, 10:12:16, time (data): 0.734 (0.003)] l_pix: 1.1738e-02 
2023-10-30 12:29:52,509 INFO: [Class..][epoch: 11, iter:  34,800, lr:(2.000e-04,)] [eta: 2 days, 10:08:49, time (data): 0.752 (0.003)] l_pix: 1.2911e-02 
2023-10-30 12:31:09,978 INFO: [Class..][epoch: 11, iter:  34,900, lr:(2.000e-04,)] [eta: 2 days, 10:06:11, time (data): 0.772 (0.004)] l_pix: 1.2666e-02 
2023-10-30 12:32:30,088 INFO: [Class..][epoch: 11, iter:  35,000, lr:(2.000e-04,)] [eta: 2 days, 10:05:56, time (data): 0.788 (0.004)] l_pix: 1.9217e-02 
2023-10-30 12:32:30,089 INFO: Saving models and training states.
2023-10-30 12:32:51,545 WARNING: Multiple validation datasets are *only* supported by SRModel.
2023-10-30 12:33:06,781 INFO: Validation Set5
	 # psnr: 38.1966	Best: 38.1966 @ 35000 iter
	 # ssim: 0.9619	Best: 0.9619 @ 35000 iter

2023-10-30 12:33:59,040 INFO: Validation Set14
	 # psnr: 34.0095	Best: 34.0095 @ 35000 iter
	 # ssim: 0.9210	Best: 0.9210 @ 35000 iter

2023-10-30 12:37:18,420 INFO: Validation BSD100
	 # psnr: 32.3900	Best: 32.3900 @ 35000 iter
	 # ssim: 0.9030	Best: 0.9030 @ 35000 iter

2023-10-30 12:57:27,075 INFO: Validation Urban100
	 # psnr: 32.8882	Best: 32.8882 @ 35000 iter
	 # ssim: 0.9353	Best: 0.9353 @ 35000 iter

