2023-10-30 09:37:23,319 INFO: 
                ____                _       _____  ____
               / __ ) ____ _ _____ (_)_____/ ___/ / __ \
              / __  |/ __ `// ___// // ___/\__ \ / /_/ /
             / /_/ // /_/ /(__  )/ // /__ ___/ // _, _/
            /_____/ \__,_//____//_/ \___//____//_/ |_|
     ______                   __   __                 __      __
    / ____/____   ____   ____/ /  / /   __  __ _____ / /__   / /
   / / __ / __ \ / __ \ / __  /  / /   / / / // ___// //_/  / /
  / /_/ // /_/ // /_/ // /_/ /  / /___/ /_/ // /__ / /<    /_/
  \____/ \____/ \____/ \____/  /_____/\____/ \___//_/|_|  (_)
    
Version Information: 
	BasicSR: 1.4.2
	PyTorch: 2.0.1
	TorchVision: 0.15.2
2023-10-30 09:37:23,320 INFO: 
  name: ClassicalX2_003_Pretrained_SwinIR_dwconvs+KV_MSA+(CAB_dwconv)_ConvFFN_DIV2K_1Miters_P48W8_LR2e-4_B6G2_2080ti
  model_type: SwinIRModel
  scale: 2
  num_gpu: 2
  manual_seed: 3407
  datasets:[
    train:[
      name: DIV2K
      type: PairedImageDataset
      dataroot_gt: datasets/DIV2K/DIV2K_train_HR_sub
      dataroot_lq: datasets/DIV2K/DIV2K_train_LR_bicubic/X2_sub
      meta_info_file: basicsr/data/meta_info/meta_info_DIV2K800sub_GT.txt
      filename_tmpl: {}
      io_backend:[
        type: disk
      ]
      gt_size: 96
      use_hflip: True
      use_rot: True
      num_worker_per_gpu: 8
      batch_size_per_gpu: 6
      dataset_enlarge_ratio: 1
      prefetch_mode: None
      phase: train
      scale: 2
    ]
    val_1:[
      name: Set5
      type: PairedImageDataset
      dataroot_gt: datasets/Set5/GTmod12
      dataroot_lq: datasets/Set5/LRbicx2
      io_backend:[
        type: disk
      ]
      phase: val
      scale: 2
    ]
    val_2:[
      name: Set14
      type: PairedImageDataset
      dataroot_gt: datasets/Set14/GTmod12
      dataroot_lq: datasets/Set14/LRbicx2
      io_backend:[
        type: disk
      ]
      phase: val
      scale: 2
    ]
    val_3:[
      name: BSD100
      type: PairedImageDataset
      dataroot_gt: ./datasets/BSDS100/GTmod12
      dataroot_lq: ./datasets/BSDS100/LRbicx2
      io_backend:[
        type: disk
      ]
      phase: val
      scale: 2
    ]
    val_4:[
      name: Urban100
      type: PairedImageDataset
      dataroot_gt: ./datasets/urban100/GTmod12
      dataroot_lq: ./datasets/urban100/LRbicx2
      io_backend:[
        type: disk
      ]
      phase: val
      scale: 2
    ]
    val_5:[
      name: Manga109
      type: PairedImageDataset
      dataroot_gt: ./datasets/manga109/GTmod12
      dataroot_lq: ./datasets/manga109/LRbicx2
      io_backend:[
        type: disk
      ]
      phase: val
      scale: 2
    ]
  ]
  network_g:[
    type: SwinIR_Modified
    upscale: 2
    in_chans: 3
    img_size: 48
    window_size: 8
    img_range: 1.0
    depths: [6, 6, 6, 6, 6, 6]
    embed_dim: 180
    num_heads: [6, 6, 6, 6, 6, 6]
    mlp_ratio: 2
    upsampler: pixelshuffle
    resi_connection: 1conv
  ]
  path:[
    pretrain_network_g: /share3/home/renzihao/BasicSR/experiments/ClassicalX2_003_Pretrained_SwinIR_dwconvs+KV_MSA+(CAB_dwconv)_ConvFFN_DIV2K_1Miters_P48W8_LR2e-4_B6G2_2080ti/models/net_g_25000.pth
    strict_load_g: False
    resume_state: experiments/ClassicalX2_003_Pretrained_SwinIR_dwconvs+KV_MSA+(CAB_dwconv)_ConvFFN_DIV2K_1Miters_P48W8_LR2e-4_B6G2_2080ti/training_states/25000.state
    experiments_root: /share3/home/renzihao/BasicSR/experiments/ClassicalX2_003_Pretrained_SwinIR_dwconvs+KV_MSA+(CAB_dwconv)_ConvFFN_DIV2K_1Miters_P48W8_LR2e-4_B6G2_2080ti
    models: /share3/home/renzihao/BasicSR/experiments/ClassicalX2_003_Pretrained_SwinIR_dwconvs+KV_MSA+(CAB_dwconv)_ConvFFN_DIV2K_1Miters_P48W8_LR2e-4_B6G2_2080ti/models
    training_states: /share3/home/renzihao/BasicSR/experiments/ClassicalX2_003_Pretrained_SwinIR_dwconvs+KV_MSA+(CAB_dwconv)_ConvFFN_DIV2K_1Miters_P48W8_LR2e-4_B6G2_2080ti/training_states
    log: /share3/home/renzihao/BasicSR/experiments/ClassicalX2_003_Pretrained_SwinIR_dwconvs+KV_MSA+(CAB_dwconv)_ConvFFN_DIV2K_1Miters_P48W8_LR2e-4_B6G2_2080ti
    visualization: /share3/home/renzihao/BasicSR/experiments/ClassicalX2_003_Pretrained_SwinIR_dwconvs+KV_MSA+(CAB_dwconv)_ConvFFN_DIV2K_1Miters_P48W8_LR2e-4_B6G2_2080ti/visualization
  ]
  train:[
    ema_decay: 0.999
    optim_g:[
      type: Adam
      lr: 0.0002
      weight_decay: 0
      betas: [0.9, 0.99]
    ]
    scheduler:[
      type: MultiStepLR
      milestones: [50000, 200000, 250000, 275000]
      gamma: 0.5
    ]
    total_iter: 300000
    warmup_iter: -1
    pixel_opt:[
      type: L1Loss
      loss_weight: 1.0
      reduction: mean
    ]
  ]
  val:[
    val_freq: 5000.0
    save_img: False
    metrics:[
      psnr:[
        type: calculate_psnr
        crop_border: 2
        test_y_channel: True
      ]
      ssim:[
        type: calculate_ssim
        crop_border: 2
        test_y_channel: True
      ]
    ]
  ]
  logger:[
    print_freq: 100
    save_checkpoint_freq: 5000.0
    use_tb_logger: True
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  dist_params:[
    backend: nccl
    port: 29500
  ]
  dist: True
  rank: 0
  world_size: 2
  auto_resume: True
  is_train: True
  root_path: /share3/home/renzihao/BasicSR

2023-10-30 09:38:00,580 INFO: Dataset [PairedImageDataset] - DIV2K is built.
2023-10-30 09:38:00,582 INFO: Training statistics:
	Number of train images: 32592
	Dataset enlarge ratio: 1
	Batch size per gpu: 6
	World size (gpu number): 2
	Require iter number per epoch: 2716
	Total epochs: 111; iters: 300000.
2023-10-30 09:38:00,584 INFO: Dataset [PairedImageDataset] - Set5 is built.
2023-10-30 09:38:00,585 INFO: Number of val images/folders in Set5: 5
2023-10-30 09:38:00,586 INFO: Dataset [PairedImageDataset] - Set14 is built.
2023-10-30 09:38:00,587 INFO: Number of val images/folders in Set14: 14
2023-10-30 09:38:00,600 INFO: Dataset [PairedImageDataset] - BSD100 is built.
2023-10-30 09:38:00,601 INFO: Number of val images/folders in BSD100: 100
2023-10-30 09:38:00,610 INFO: Dataset [PairedImageDataset] - Urban100 is built.
2023-10-30 09:38:00,611 INFO: Number of val images/folders in Urban100: 100
2023-10-30 09:38:00,621 INFO: Dataset [PairedImageDataset] - Manga109 is built.
2023-10-30 09:38:00,621 INFO: Number of val images/folders in Manga109: 109
2023-10-30 09:38:01,046 INFO: Network [SwinIR_Modified] is created.
2023-10-30 09:38:10,533 INFO: Network: DistributedDataParallel - SwinIR_Modified, with parameters: 12,267,593
2023-10-30 09:38:10,534 INFO: SwinIR_Modified(
  (conv_first): Conv2d(3, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (edge_ex): EdgeExtraction(
    (hpf): Sobel(
      (conv_sobel_x): Conv2d(3, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=3, bias=False)
      (conv_sobel_y): Conv2d(3, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=3, bias=False)
    )
    (conv): Conv2d(3, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (patch_embed): PatchEmbed(
    (norm): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
  )
  (patch_unembed): PatchUnEmbed()
  (pos_drop): Dropout(p=0.0, inplace=False)
  (layers): ModuleList(
    (0): RSTB(
      (residual_group): BasicLayer(
        dim=180, input_resolution=(48, 48), depth=6
        (blocks): ModuleList(
          (0): SwinTransformerBlock(
            dim=180, input_resolution=(48, 48), num_heads=6, window_size=8, shift_size=0, mlp_ratio=2
            (norm1): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (attn): WindowAttention(
              dim=180, window_size=(8, 8), num_heads=6
              (q): Linear(in_features=180, out_features=180, bias=True)
              (kv): Linear(in_features=180, out_features=360, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=False)
              (proj): Linear(in_features=180, out_features=180, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=False)
              (softmax): Softmax(dim=-1)
            )
            (conv_scale): LearnableScale()
            (conv_block): CAB(
              (cab): Sequential(
                (0): Conv2d(180, 60, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (1): GELU(approximate='none')
                (2): Conv2d(60, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (3): ChannelAttention(
                  (attention): Sequential(
                    (0): AdaptiveAvgPool2d(output_size=1)
                    (1): Conv2d(180, 6, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (2): ReLU(inplace=True)
                    (3): Conv2d(6, 180, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (4): Sigmoid()
                  )
                )
              )
            )
            (drop_path): Identity()
            (norm2): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=180, out_features=360, bias=True)
              (act): GELU(approximate='none')
              (dwconv): dwconv(
                (depthwise_conv): Sequential(
                  (0): Conv2d(360, 360, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=360)
                  (1): GELU(approximate='none')
                )
              )
              (fc2): Linear(in_features=360, out_features=180, bias=True)
              (drop): Dropout(p=0.0, inplace=False)
            )
          )
          (1): SwinTransformerBlock(
            dim=180, input_resolution=(48, 48), num_heads=6, window_size=8, shift_size=4, mlp_ratio=2
            (norm1): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (attn): WindowAttention(
              dim=180, window_size=(8, 8), num_heads=6
              (q): Linear(in_features=180, out_features=180, bias=True)
              (kv): Linear(in_features=180, out_features=360, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=False)
              (proj): Linear(in_features=180, out_features=180, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=False)
              (softmax): Softmax(dim=-1)
            )
            (conv_scale): LearnableScale()
            (conv_block): CAB(
              (cab): Sequential(
                (0): Conv2d(180, 60, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (1): GELU(approximate='none')
                (2): Conv2d(60, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (3): ChannelAttention(
                  (attention): Sequential(
                    (0): AdaptiveAvgPool2d(output_size=1)
                    (1): Conv2d(180, 6, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (2): ReLU(inplace=True)
                    (3): Conv2d(6, 180, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (4): Sigmoid()
                  )
                )
              )
            )
            (drop_path): DropPath()
            (norm2): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=180, out_features=360, bias=True)
              (act): GELU(approximate='none')
              (dwconv): dwconv(
                (depthwise_conv): Sequential(
                  (0): Conv2d(360, 360, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=360)
                  (1): GELU(approximate='none')
                )
              )
              (fc2): Linear(in_features=360, out_features=180, bias=True)
              (drop): Dropout(p=0.0, inplace=False)
            )
          )
          (2): SwinTransformerBlock(
            dim=180, input_resolution=(48, 48), num_heads=6, window_size=8, shift_size=0, mlp_ratio=2
            (norm1): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (attn): WindowAttention(
              dim=180, window_size=(8, 8), num_heads=6
              (q): Linear(in_features=180, out_features=180, bias=True)
              (kv): Linear(in_features=180, out_features=360, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=False)
              (proj): Linear(in_features=180, out_features=180, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=False)
              (softmax): Softmax(dim=-1)
            )
            (conv_scale): LearnableScale()
            (conv_block): CAB(
              (cab): Sequential(
                (0): Conv2d(180, 60, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (1): GELU(approximate='none')
                (2): Conv2d(60, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (3): ChannelAttention(
                  (attention): Sequential(
                    (0): AdaptiveAvgPool2d(output_size=1)
                    (1): Conv2d(180, 6, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (2): ReLU(inplace=True)
                    (3): Conv2d(6, 180, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (4): Sigmoid()
                  )
                )
              )
            )
            (drop_path): DropPath()
            (norm2): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=180, out_features=360, bias=True)
              (act): GELU(approximate='none')
              (dwconv): dwconv(
                (depthwise_conv): Sequential(
                  (0): Conv2d(360, 360, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=360)
                  (1): GELU(approximate='none')
                )
              )
              (fc2): Linear(in_features=360, out_features=180, bias=True)
              (drop): Dropout(p=0.0, inplace=False)
            )
          )
          (3): SwinTransformerBlock(
            dim=180, input_resolution=(48, 48), num_heads=6, window_size=8, shift_size=4, mlp_ratio=2
            (norm1): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (attn): WindowAttention(
              dim=180, window_size=(8, 8), num_heads=6
              (q): Linear(in_features=180, out_features=180, bias=True)
              (kv): Linear(in_features=180, out_features=360, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=False)
              (proj): Linear(in_features=180, out_features=180, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=False)
              (softmax): Softmax(dim=-1)
            )
            (conv_scale): LearnableScale()
            (conv_block): CAB(
              (cab): Sequential(
                (0): Conv2d(180, 60, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (1): GELU(approximate='none')
                (2): Conv2d(60, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (3): ChannelAttention(
                  (attention): Sequential(
                    (0): AdaptiveAvgPool2d(output_size=1)
                    (1): Conv2d(180, 6, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (2): ReLU(inplace=True)
                    (3): Conv2d(6, 180, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (4): Sigmoid()
                  )
                )
              )
            )
            (drop_path): DropPath()
            (norm2): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=180, out_features=360, bias=True)
              (act): GELU(approximate='none')
              (dwconv): dwconv(
                (depthwise_conv): Sequential(
                  (0): Conv2d(360, 360, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=360)
                  (1): GELU(approximate='none')
                )
              )
              (fc2): Linear(in_features=360, out_features=180, bias=True)
              (drop): Dropout(p=0.0, inplace=False)
            )
          )
          (4): SwinTransformerBlock(
            dim=180, input_resolution=(48, 48), num_heads=6, window_size=8, shift_size=0, mlp_ratio=2
            (norm1): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (attn): WindowAttention(
              dim=180, window_size=(8, 8), num_heads=6
              (q): Linear(in_features=180, out_features=180, bias=True)
              (kv): Linear(in_features=180, out_features=360, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=False)
              (proj): Linear(in_features=180, out_features=180, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=False)
              (softmax): Softmax(dim=-1)
            )
            (conv_scale): LearnableScale()
            (conv_block): CAB(
              (cab): Sequential(
                (0): Conv2d(180, 60, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (1): GELU(approximate='none')
                (2): Conv2d(60, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (3): ChannelAttention(
                  (attention): Sequential(
                    (0): AdaptiveAvgPool2d(output_size=1)
                    (1): Conv2d(180, 6, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (2): ReLU(inplace=True)
                    (3): Conv2d(6, 180, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (4): Sigmoid()
                  )
                )
              )
            )
            (drop_path): DropPath()
            (norm2): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=180, out_features=360, bias=True)
              (act): GELU(approximate='none')
              (dwconv): dwconv(
                (depthwise_conv): Sequential(
                  (0): Conv2d(360, 360, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=360)
                  (1): GELU(approximate='none')
                )
              )
              (fc2): Linear(in_features=360, out_features=180, bias=True)
              (drop): Dropout(p=0.0, inplace=False)
            )
          )
          (5): SwinTransformerBlock(
            dim=180, input_resolution=(48, 48), num_heads=6, window_size=8, shift_size=4, mlp_ratio=2
            (norm1): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (attn): WindowAttention(
              dim=180, window_size=(8, 8), num_heads=6
              (q): Linear(in_features=180, out_features=180, bias=True)
              (kv): Linear(in_features=180, out_features=360, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=False)
              (proj): Linear(in_features=180, out_features=180, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=False)
              (softmax): Softmax(dim=-1)
            )
            (conv_scale): LearnableScale()
            (conv_block): CAB(
              (cab): Sequential(
                (0): Conv2d(180, 60, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (1): GELU(approximate='none')
                (2): Conv2d(60, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (3): ChannelAttention(
                  (attention): Sequential(
                    (0): AdaptiveAvgPool2d(output_size=1)
                    (1): Conv2d(180, 6, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (2): ReLU(inplace=True)
                    (3): Conv2d(6, 180, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (4): Sigmoid()
                  )
                )
              )
            )
            (drop_path): DropPath()
            (norm2): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=180, out_features=360, bias=True)
              (act): GELU(approximate='none')
              (dwconv): dwconv(
                (depthwise_conv): Sequential(
                  (0): Conv2d(360, 360, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=360)
                  (1): GELU(approximate='none')
                )
              )
              (fc2): Linear(in_features=360, out_features=180, bias=True)
              (drop): Dropout(p=0.0, inplace=False)
            )
          )
        )
      )
      (conv): Conv2d(180, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (patch_embed): PatchEmbed()
      (patch_unembed): PatchUnEmbed()
    )
    (1-5): 5 x RSTB(
      (residual_group): BasicLayer(
        dim=180, input_resolution=(48, 48), depth=6
        (blocks): ModuleList(
          (0): SwinTransformerBlock(
            dim=180, input_resolution=(48, 48), num_heads=6, window_size=8, shift_size=0, mlp_ratio=2
            (norm1): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (attn): WindowAttention(
              dim=180, window_size=(8, 8), num_heads=6
              (q): Linear(in_features=180, out_features=180, bias=True)
              (kv): Linear(in_features=180, out_features=360, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=False)
              (proj): Linear(in_features=180, out_features=180, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=False)
              (softmax): Softmax(dim=-1)
            )
            (conv_scale): LearnableScale()
            (conv_block): CAB(
              (cab): Sequential(
                (0): Conv2d(180, 60, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (1): GELU(approximate='none')
                (2): Conv2d(60, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (3): ChannelAttention(
                  (attention): Sequential(
                    (0): AdaptiveAvgPool2d(output_size=1)
                    (1): Conv2d(180, 6, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (2): ReLU(inplace=True)
                    (3): Conv2d(6, 180, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (4): Sigmoid()
                  )
                )
              )
            )
            (drop_path): DropPath()
            (norm2): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=180, out_features=360, bias=True)
              (act): GELU(approximate='none')
              (dwconv): dwconv(
                (depthwise_conv): Sequential(
                  (0): Conv2d(360, 360, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=360)
                  (1): GELU(approximate='none')
                )
              )
              (fc2): Linear(in_features=360, out_features=180, bias=True)
              (drop): Dropout(p=0.0, inplace=False)
            )
          )
          (1): SwinTransformerBlock(
            dim=180, input_resolution=(48, 48), num_heads=6, window_size=8, shift_size=4, mlp_ratio=2
            (norm1): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (attn): WindowAttention(
              dim=180, window_size=(8, 8), num_heads=6
              (q): Linear(in_features=180, out_features=180, bias=True)
              (kv): Linear(in_features=180, out_features=360, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=False)
              (proj): Linear(in_features=180, out_features=180, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=False)
              (softmax): Softmax(dim=-1)
            )
            (conv_scale): LearnableScale()
            (conv_block): CAB(
              (cab): Sequential(
                (0): Conv2d(180, 60, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (1): GELU(approximate='none')
                (2): Conv2d(60, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (3): ChannelAttention(
                  (attention): Sequential(
                    (0): AdaptiveAvgPool2d(output_size=1)
                    (1): Conv2d(180, 6, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (2): ReLU(inplace=True)
                    (3): Conv2d(6, 180, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (4): Sigmoid()
                  )
                )
              )
            )
            (drop_path): DropPath()
            (norm2): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=180, out_features=360, bias=True)
              (act): GELU(approximate='none')
              (dwconv): dwconv(
                (depthwise_conv): Sequential(
                  (0): Conv2d(360, 360, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=360)
                  (1): GELU(approximate='none')
                )
              )
              (fc2): Linear(in_features=360, out_features=180, bias=True)
              (drop): Dropout(p=0.0, inplace=False)
            )
          )
          (2): SwinTransformerBlock(
            dim=180, input_resolution=(48, 48), num_heads=6, window_size=8, shift_size=0, mlp_ratio=2
            (norm1): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (attn): WindowAttention(
              dim=180, window_size=(8, 8), num_heads=6
              (q): Linear(in_features=180, out_features=180, bias=True)
              (kv): Linear(in_features=180, out_features=360, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=False)
              (proj): Linear(in_features=180, out_features=180, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=False)
              (softmax): Softmax(dim=-1)
            )
            (conv_scale): LearnableScale()
            (conv_block): CAB(
              (cab): Sequential(
                (0): Conv2d(180, 60, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (1): GELU(approximate='none')
                (2): Conv2d(60, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (3): ChannelAttention(
                  (attention): Sequential(
                    (0): AdaptiveAvgPool2d(output_size=1)
                    (1): Conv2d(180, 6, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (2): ReLU(inplace=True)
                    (3): Conv2d(6, 180, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (4): Sigmoid()
                  )
                )
              )
            )
            (drop_path): DropPath()
            (norm2): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=180, out_features=360, bias=True)
              (act): GELU(approximate='none')
              (dwconv): dwconv(
                (depthwise_conv): Sequential(
                  (0): Conv2d(360, 360, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=360)
                  (1): GELU(approximate='none')
                )
              )
              (fc2): Linear(in_features=360, out_features=180, bias=True)
              (drop): Dropout(p=0.0, inplace=False)
            )
          )
          (3): SwinTransformerBlock(
            dim=180, input_resolution=(48, 48), num_heads=6, window_size=8, shift_size=4, mlp_ratio=2
            (norm1): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (attn): WindowAttention(
              dim=180, window_size=(8, 8), num_heads=6
              (q): Linear(in_features=180, out_features=180, bias=True)
              (kv): Linear(in_features=180, out_features=360, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=False)
              (proj): Linear(in_features=180, out_features=180, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=False)
              (softmax): Softmax(dim=-1)
            )
            (conv_scale): LearnableScale()
            (conv_block): CAB(
              (cab): Sequential(
                (0): Conv2d(180, 60, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (1): GELU(approximate='none')
                (2): Conv2d(60, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (3): ChannelAttention(
                  (attention): Sequential(
                    (0): AdaptiveAvgPool2d(output_size=1)
                    (1): Conv2d(180, 6, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (2): ReLU(inplace=True)
                    (3): Conv2d(6, 180, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (4): Sigmoid()
                  )
                )
              )
            )
            (drop_path): DropPath()
            (norm2): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=180, out_features=360, bias=True)
              (act): GELU(approximate='none')
              (dwconv): dwconv(
                (depthwise_conv): Sequential(
                  (0): Conv2d(360, 360, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=360)
                  (1): GELU(approximate='none')
                )
              )
              (fc2): Linear(in_features=360, out_features=180, bias=True)
              (drop): Dropout(p=0.0, inplace=False)
            )
          )
          (4): SwinTransformerBlock(
            dim=180, input_resolution=(48, 48), num_heads=6, window_size=8, shift_size=0, mlp_ratio=2
            (norm1): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (attn): WindowAttention(
              dim=180, window_size=(8, 8), num_heads=6
              (q): Linear(in_features=180, out_features=180, bias=True)
              (kv): Linear(in_features=180, out_features=360, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=False)
              (proj): Linear(in_features=180, out_features=180, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=False)
              (softmax): Softmax(dim=-1)
            )
            (conv_scale): LearnableScale()
            (conv_block): CAB(
              (cab): Sequential(
                (0): Conv2d(180, 60, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (1): GELU(approximate='none')
                (2): Conv2d(60, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (3): ChannelAttention(
                  (attention): Sequential(
                    (0): AdaptiveAvgPool2d(output_size=1)
                    (1): Conv2d(180, 6, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (2): ReLU(inplace=True)
                    (3): Conv2d(6, 180, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (4): Sigmoid()
                  )
                )
              )
            )
            (drop_path): DropPath()
            (norm2): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=180, out_features=360, bias=True)
              (act): GELU(approximate='none')
              (dwconv): dwconv(
                (depthwise_conv): Sequential(
                  (0): Conv2d(360, 360, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=360)
                  (1): GELU(approximate='none')
                )
              )
              (fc2): Linear(in_features=360, out_features=180, bias=True)
              (drop): Dropout(p=0.0, inplace=False)
            )
          )
          (5): SwinTransformerBlock(
            dim=180, input_resolution=(48, 48), num_heads=6, window_size=8, shift_size=4, mlp_ratio=2
            (norm1): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (attn): WindowAttention(
              dim=180, window_size=(8, 8), num_heads=6
              (q): Linear(in_features=180, out_features=180, bias=True)
              (kv): Linear(in_features=180, out_features=360, bias=True)
              (attn_drop): Dropout(p=0.0, inplace=False)
              (proj): Linear(in_features=180, out_features=180, bias=True)
              (proj_drop): Dropout(p=0.0, inplace=False)
              (softmax): Softmax(dim=-1)
            )
            (conv_scale): LearnableScale()
            (conv_block): CAB(
              (cab): Sequential(
                (0): Conv2d(180, 60, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (1): GELU(approximate='none')
                (2): Conv2d(60, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=60)
                (3): ChannelAttention(
                  (attention): Sequential(
                    (0): AdaptiveAvgPool2d(output_size=1)
                    (1): Conv2d(180, 6, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (2): ReLU(inplace=True)
                    (3): Conv2d(6, 180, kernel_size=(1, 1), stride=(1, 1), groups=6)
                    (4): Sigmoid()
                  )
                )
              )
            )
            (drop_path): DropPath()
            (norm2): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
            (mlp): Mlp(
              (fc1): Linear(in_features=180, out_features=360, bias=True)
              (act): GELU(approximate='none')
              (dwconv): dwconv(
                (depthwise_conv): Sequential(
                  (0): Conv2d(360, 360, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=360)
                  (1): GELU(approximate='none')
                )
              )
              (fc2): Linear(in_features=360, out_features=180, bias=True)
              (drop): Dropout(p=0.0, inplace=False)
            )
          )
        )
      )
      (conv): Conv2d(180, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (patch_embed): PatchEmbed()
      (patch_unembed): PatchUnEmbed()
    )
  )
  (edge_convs): ModuleList(
    (0-5): 6 x EdgeConv(
      (dwconv): Conv2d(180, 180, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=180)
      (gelu): GELU(approximate='none')
    )
  )
  (norm): LayerNorm((180,), eps=1e-05, elementwise_affine=True)
  (conv_after_body): Conv2d(180, 180, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_before_upsample): Sequential(
    (0): Conv2d(180, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): LeakyReLU(negative_slope=0.01, inplace=True)
  )
  (upsample): Upsample(
    (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): PixelShuffle(upscale_factor=2)
  )
  (conv_last): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
)
2023-10-30 09:38:21,538 INFO: Loading SwinIR_Modified model from /share3/home/renzihao/BasicSR/experiments/ClassicalX2_003_Pretrained_SwinIR_dwconvs+KV_MSA+(CAB_dwconv)_ConvFFN_DIV2K_1Miters_P48W8_LR2e-4_B6G2_2080ti/models/net_g_25000.pth, with param key: [params].
2023-10-30 09:38:21,785 INFO: Use Exponential Moving Average with decay: 0.999
2023-10-30 09:38:22,125 INFO: Network [SwinIR_Modified] is created.
2023-10-30 09:38:23,176 INFO: Loading SwinIR_Modified model from /share3/home/renzihao/BasicSR/experiments/ClassicalX2_003_Pretrained_SwinIR_dwconvs+KV_MSA+(CAB_dwconv)_ConvFFN_DIV2K_1Miters_P48W8_LR2e-4_B6G2_2080ti/models/net_g_25000.pth, with param key: [params_ema].
2023-10-30 09:38:23,438 INFO: Loss [L1Loss] is created.
2023-10-30 09:38:23,439 WARNING: Params module.edge_ex.hpf.conv_sobel_x.weight will not be optimized.
2023-10-30 09:38:23,439 WARNING: Params module.edge_ex.hpf.conv_sobel_y.weight will not be optimized.
2023-10-30 09:38:23,447 INFO: Model [SwinIRModel] is created.
2023-10-30 09:38:23,745 INFO: Resuming training from epoch: 9, iter: 25000.
2023-10-30 09:39:07,062 INFO: Start training from epoch: 9, iter: 25000
2023-10-30 09:41:41,784 INFO: [Class..][epoch:  9, iter:  25,100, lr:(2.000e-04,)] [eta: 6 days, 5:43:34, time (data): 1.547 (0.422)] l_pix: 1.6975e-02 
2023-10-30 09:42:56,815 INFO: [Class..][epoch:  9, iter:  25,200, lr:(2.000e-04,)] [eta: 4 days, 7:42:08, time (data): 1.149 (0.212)] l_pix: 1.3351e-02 
2023-10-30 09:44:09,693 INFO: [Class..][epoch:  9, iter:  25,300, lr:(2.000e-04,)] [eta: 3 days, 15:41:58, time (data): 0.729 (0.002)] l_pix: 1.2578e-02 
2023-10-30 09:45:22,706 INFO: [Class..][epoch:  9, iter:  25,400, lr:(2.000e-04,)] [eta: 3 days, 7:41:38, time (data): 0.729 (0.002)] l_pix: 1.2164e-02 
2023-10-30 09:46:35,702 INFO: [Class..][epoch:  9, iter:  25,500, lr:(2.000e-04,)] [eta: 3 days, 2:52:23, time (data): 0.729 (0.002)] l_pix: 1.5419e-02 
2023-10-30 09:47:50,277 INFO: [Class..][epoch:  9, iter:  25,600, lr:(2.000e-04,)] [eta: 2 days, 23:51:01, time (data): 0.737 (0.002)] l_pix: 8.1125e-03 
2023-10-30 09:49:06,638 INFO: [Class..][epoch:  9, iter:  25,700, lr:(2.000e-04,)] [eta: 2 days, 21:52:41, time (data): 0.765 (0.002)] l_pix: 8.9167e-03 
2023-10-30 09:50:19,986 INFO: [Class..][epoch:  9, iter:  25,800, lr:(2.000e-04,)] [eta: 2 days, 20:06:24, time (data): 0.749 (0.002)] l_pix: 1.9039e-02 
2023-10-30 09:51:32,661 INFO: [Class..][epoch:  9, iter:  25,900, lr:(2.000e-04,)] [eta: 2 days, 18:40:00, time (data): 0.729 (0.002)] l_pix: 1.2429e-02 
2023-10-30 09:52:46,517 INFO: [Class..][epoch:  9, iter:  26,000, lr:(2.000e-04,)] [eta: 2 days, 17:36:02, time (data): 0.734 (0.002)] l_pix: 9.6416e-03 
2023-10-30 09:53:59,944 INFO: [Class..][epoch:  9, iter:  26,100, lr:(2.000e-04,)] [eta: 2 days, 16:41:40, time (data): 0.734 (0.002)] l_pix: 1.2033e-02 
2023-10-30 09:55:12,794 INFO: [Class..][epoch:  9, iter:  26,200, lr:(2.000e-04,)] [eta: 2 days, 15:53:58, time (data): 0.731 (0.002)] l_pix: 1.3873e-02 
2023-10-30 09:56:22,557 INFO: [Class..][epoch:  9, iter:  26,300, lr:(2.000e-04,)] [eta: 2 days, 15:02:35, time (data): 0.699 (0.002)] l_pix: 1.6930e-02 
2023-10-30 09:57:34,587 INFO: [Class..][epoch:  9, iter:  26,400, lr:(2.000e-04,)] [eta: 2 days, 14:25:45, time (data): 0.710 (0.002)] l_pix: 1.6783e-02 
2023-10-30 09:58:46,746 INFO: [Class..][epoch:  9, iter:  26,500, lr:(2.000e-04,)] [eta: 2 days, 13:54:04, time (data): 0.715 (0.002)] l_pix: 1.1157e-02 
2023-10-30 09:59:58,412 INFO: [Class..][epoch:  9, iter:  26,600, lr:(2.000e-04,)] [eta: 2 days, 13:24:47, time (data): 0.716 (0.002)] l_pix: 1.3248e-02 
2023-10-30 10:01:10,722 INFO: [Class..][epoch:  9, iter:  26,700, lr:(2.000e-04,)] [eta: 2 days, 13:00:31, time (data): 0.719 (0.002)] l_pix: 1.4188e-02 
2023-10-30 10:02:23,772 INFO: [Class..][epoch:  9, iter:  26,800, lr:(2.000e-04,)] [eta: 2 days, 12:40:41, time (data): 0.725 (0.002)] l_pix: 1.3151e-02 
2023-10-30 10:03:37,150 INFO: [Class..][epoch:  9, iter:  26,900, lr:(2.000e-04,)] [eta: 2 days, 12:23:36, time (data): 0.733 (0.002)] l_pix: 1.2048e-02 
2023-10-30 10:04:50,355 INFO: [Class..][epoch:  9, iter:  27,000, lr:(2.000e-04,)] [eta: 2 days, 12:07:43, time (data): 0.733 (0.002)] l_pix: 1.4366e-02 
2023-10-30 10:06:03,039 INFO: [Class..][epoch:  9, iter:  27,100, lr:(2.000e-04,)] [eta: 2 days, 11:52:05, time (data): 0.729 (0.002)] l_pix: 1.5047e-02 
2023-10-30 10:07:16,793 INFO: [Class..][epoch:  9, iter:  27,200, lr:(2.000e-04,)] [eta: 2 days, 11:39:59, time (data): 0.733 (0.002)] l_pix: 1.0646e-02 
2023-10-30 10:08:29,922 INFO: [Class..][epoch:  9, iter:  27,300, lr:(2.000e-04,)] [eta: 2 days, 11:27:35, time (data): 0.734 (0.002)] l_pix: 1.0449e-02 
2023-10-30 10:09:43,390 INFO: [Class..][epoch:  9, iter:  27,400, lr:(2.000e-04,)] [eta: 2 days, 11:16:46, time (data): 0.735 (0.002)] l_pix: 1.6298e-02 
2023-10-30 10:10:56,657 INFO: [Class..][epoch:  9, iter:  27,500, lr:(2.000e-04,)] [eta: 2 days, 11:06:21, time (data): 0.740 (0.002)] l_pix: 1.3820e-02 
2023-10-30 10:12:05,740 INFO: [Class..][epoch:  9, iter:  27,600, lr:(2.000e-04,)] [eta: 2 days, 10:49:20, time (data): 0.714 (0.002)] l_pix: 1.0132e-02 
2023-10-30 10:13:21,904 INFO: [Class..][epoch:  9, iter:  27,700, lr:(2.000e-04,)] [eta: 2 days, 10:45:24, time (data): 0.760 (0.002)] l_pix: 9.7898e-03 
2023-10-30 10:15:20,041 INFO: [Class..][epoch: 10, iter:  27,800, lr:(2.000e-04,)] [eta: 2 days, 11:49:37, time (data): 0.985 (0.235)] l_pix: 9.4394e-03 
2023-10-30 10:16:30,505 INFO: [Class..][epoch: 10, iter:  27,900, lr:(2.000e-04,)] [eta: 2 days, 11:34:46, time (data): 0.703 (0.002)] l_pix: 1.0447e-02 
2023-10-30 10:17:39,585 INFO: [Class..][epoch: 10, iter:  28,000, lr:(2.000e-04,)] [eta: 2 days, 11:18:44, time (data): 0.696 (0.002)] l_pix: 1.2497e-02 
2023-10-30 10:18:50,502 INFO: [Class..][epoch: 10, iter:  28,100, lr:(2.000e-04,)] [eta: 2 days, 11:06:20, time (data): 0.710 (0.002)] l_pix: 1.5699e-02 
2023-10-30 10:20:03,225 INFO: [Class..][epoch: 10, iter:  28,200, lr:(2.000e-04,)] [eta: 2 days, 10:57:12, time (data): 0.719 (0.002)] l_pix: 1.2629e-02 
2023-10-30 10:21:14,002 INFO: [Class..][epoch: 10, iter:  28,300, lr:(2.000e-04,)] [eta: 2 days, 10:45:52, time (data): 0.708 (0.002)] l_pix: 1.0447e-02 
2023-10-30 10:22:23,286 INFO: [Class..][epoch: 10, iter:  28,400, lr:(2.000e-04,)] [eta: 2 days, 10:33:09, time (data): 0.700 (0.002)] l_pix: 9.5186e-03 
2023-10-30 10:23:25,062 INFO: [Class..][epoch: 10, iter:  28,500, lr:(2.000e-04,)] [eta: 2 days, 10:11:24, time (data): 0.621 (0.002)] l_pix: 8.3457e-03 
2023-10-30 10:24:26,646 INFO: [Class..][epoch: 10, iter:  28,600, lr:(2.000e-04,)] [eta: 2 days, 9:50:33, time (data): 0.618 (0.002)] l_pix: 1.1999e-02 
2023-10-30 10:25:29,563 INFO: [Class..][epoch: 10, iter:  28,700, lr:(2.000e-04,)] [eta: 2 days, 9:32:24, time (data): 0.628 (0.002)] l_pix: 9.8603e-03 
2023-10-30 10:26:32,856 INFO: [Class..][epoch: 10, iter:  28,800, lr:(2.000e-04,)] [eta: 2 days, 9:15:36, time (data): 0.631 (0.002)] l_pix: 1.1111e-02 
2023-10-30 10:27:36,636 INFO: [Class..][epoch: 10, iter:  28,900, lr:(2.000e-04,)] [eta: 2 days, 9:00:10, time (data): 0.637 (0.002)] l_pix: 1.4418e-02 
2023-10-30 10:28:40,655 INFO: [Class..][epoch: 10, iter:  29,000, lr:(2.000e-04,)] [eta: 2 days, 8:45:43, time (data): 0.639 (0.002)] l_pix: 1.1460e-02 
2023-10-30 10:29:41,199 INFO: [Class..][epoch: 10, iter:  29,100, lr:(2.000e-04,)] [eta: 2 days, 8:28:06, time (data): 0.607 (0.002)] l_pix: 1.5516e-02 
2023-10-30 10:30:42,539 INFO: [Class..][epoch: 10, iter:  29,200, lr:(2.000e-04,)] [eta: 2 days, 8:12:08, time (data): 0.611 (0.002)] l_pix: 1.0257e-02 
2023-10-30 10:31:45,023 INFO: [Class..][epoch: 10, iter:  29,300, lr:(2.000e-04,)] [eta: 2 days, 7:58:03, time (data): 0.624 (0.002)] l_pix: 1.5150e-02 
2023-10-30 10:32:46,797 INFO: [Class..][epoch: 10, iter:  29,400, lr:(2.000e-04,)] [eta: 2 days, 7:43:51, time (data): 0.621 (0.002)] l_pix: 1.7797e-02 
2023-10-30 10:33:49,107 INFO: [Class..][epoch: 10, iter:  29,500, lr:(2.000e-04,)] [eta: 2 days, 7:30:46, time (data): 0.620 (0.002)] l_pix: 9.3583e-03 
2023-10-30 10:34:51,392 INFO: [Class..][epoch: 10, iter:  29,600, lr:(2.000e-04,)] [eta: 2 days, 7:18:10, time (data): 0.622 (0.002)] l_pix: 1.4804e-02 
2023-10-30 10:35:53,002 INFO: [Class..][epoch: 10, iter:  29,700, lr:(2.000e-04,)] [eta: 2 days, 7:05:26, time (data): 0.611 (0.002)] l_pix: 1.7214e-02 
2023-10-30 10:36:54,841 INFO: [Class..][epoch: 10, iter:  29,800, lr:(2.000e-04,)] [eta: 2 days, 6:53:23, time (data): 0.615 (0.002)] l_pix: 1.5763e-02 
2023-10-30 10:37:56,482 INFO: [Class..][epoch: 10, iter:  29,900, lr:(2.000e-04,)] [eta: 2 days, 6:41:37, time (data): 0.610 (0.002)] l_pix: 1.2293e-02 
2023-10-30 10:38:59,547 INFO: [Class..][epoch: 10, iter:  30,000, lr:(2.000e-04,)] [eta: 2 days, 6:31:33, time (data): 0.622 (0.002)] l_pix: 9.8650e-03 
2023-10-30 10:38:59,547 INFO: Saving models and training states.
2023-10-30 10:39:20,787 WARNING: Multiple validation datasets are *only* supported by SRModel.
2023-10-30 10:39:26,541 INFO: Validation Set5
	 # psnr: 38.1883	Best: 38.1883 @ 30000 iter
	 # ssim: 0.9619	Best: 0.9619 @ 30000 iter

2023-10-30 10:40:00,066 INFO: Validation Set14
	 # psnr: 33.8974	Best: 33.8974 @ 30000 iter
	 # ssim: 0.9203	Best: 0.9203 @ 30000 iter

2023-10-30 10:42:01,480 INFO: Validation BSD100
	 # psnr: 32.3868	Best: 32.3868 @ 30000 iter
	 # ssim: 0.9029	Best: 0.9029 @ 30000 iter

2023-10-30 11:01:05,497 INFO: Validation Urban100
	 # psnr: 32.8696	Best: 32.8696 @ 30000 iter
	 # ssim: 0.9351	Best: 0.9351 @ 30000 iter

